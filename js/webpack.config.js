const TerserPlugin = require("terser-webpack-plugin");
const path = require("path");
const webpack = require("webpack");
const WasmPackPlugin = require("@wasm-tool/wasm-pack-plugin");

const dist = path.resolve(__dirname, "dist");
const rustObsidianSlack = path.resolve("../rust/obsidian-slack");


const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

module.exports = (env) => { 
  const isProduction = env === "production";

  return {
    resolve: {
      extensions: ['.tsx', '.ts', '.js'],

    },
    mode: env,
    entry: {
      index: "./bootstrap.js"
    },
    module: {
      rules: [
        {
          test: /\.tsx?$/,
          loader: 'ts-loader',
          options: {
            transpileOnly: true,
          },
        },
      ],
    },
    optimization: {
      minimize: isProduction,
      minimizer: [
        new TerserPlugin({
          extractComments: false,
          minify: TerserPlugin.uglifyJsMinify,
          terserOptions: {},
        }),
      ],
    },
    output: {
      path: dist,
      filename: "main.js",
      library: {
        type: "commonjs2"
      }
    },
    watch: !isProduction,
    target: "node",
    stats: {
      logging: 'info',
    },
    devtool: isProduction ? false : "inline-source-map",
    plugins: [
      new WasmPackPlugin({
        crateDirectory: rustObsidianSlack,
        forceMode: isProduction ? "production" : "development"
      }),
      new webpack.BannerPlugin(banner)
    ],
    externals: {
      electron: 'commonjs2 electron',
      obsidian: 'commonjs2 obsidian',
    },
    experiments: {
      asyncWebAssembly: true
    }
  }
};